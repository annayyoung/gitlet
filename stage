package gitlet;
import java.util.HashMap;
import java.io.File;
import java.io.Serializable;

public class Stage implements Serializable {

    //Stage should take in File arguments because those will be the pathnames, not just strings of them

    private HashMap<String, String> stageArea;
    private HashMap<String, String> copyStageArea;

    public Stage() {
        stageArea = new HashMap<String, String>();

    }

   // public Stage(File f) {
       // stageArea = new HashMap<String, String>();
       // pathString = "__gitlet";
      //  f = new File(pathString + "/staging/initStage");
  //  }

    public HashMap<String, String> returnAll() {
        return stageArea;
    }

    //creates a shallow copy of the map that
    public HashMap<String,String> getStageCopy() {
        copyStageArea = new HashMap<String, String>();
        return copyStageArea;
    }


    public void add(String... lstFiles) {

        System.out.println("in Stage add");

        /*goes through File[] of filenames -> converts file to byteArray
          -> puts Key: File filename, Value: sha1 ID into Stage Map
          -> puts file in staging folder under its string name rep */
        for (int i = 0; i < lstFiles.length; i++) {
            File f = new File(lstFiles[i]); //create a new file method in FileManager
            byte[] fileToBytes = gitlet.Utils.readContents(f);
            String fileShaId = gitlet.Utils.sha1(fileToBytes);
            stageArea.put(lstFiles[i], fileShaId);


            FilesManager.stagingAFile(lstFiles[i]);
            //FilesManager.writeObjectToArchiveFile(f, fileShaId);


            //writes file to disk under string file name in archive folder

            //FilesManager.writeObjectToStagingFile(f, fileShaId);
            //FilesManager.writeObjectToArchiveFile(f, fileShaId);

        }
    }
}
